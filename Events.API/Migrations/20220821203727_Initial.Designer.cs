// <auto-generated />
using System;
using Events.API.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Events.API.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220821203727_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Events.Domain.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanyId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Events.Domain.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventId"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventVenue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EventId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Events.Domain.EventCompany", b =>
                {
                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.HasKey("EventId", "CompanyId");

                    b.HasIndex("CompanyId");

                    b.ToTable("EventCompany");
                });

            modelBuilder.Entity("Events.Domain.EventPrivatePerson", b =>
                {
                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("PrivatePersonId")
                        .HasColumnType("int");

                    b.HasKey("EventId", "PrivatePersonId");

                    b.HasIndex("PrivatePersonId");

                    b.ToTable("EventPrivatePerson");
                });

            modelBuilder.Entity("Events.Domain.PrivatePerson", b =>
                {
                    b.Property<int>("PrivatePersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrivatePersonId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PrivatePersonId");

                    b.ToTable("PrivatePeople");
                });

            modelBuilder.Entity("Events.Domain.EventCompany", b =>
                {
                    b.HasOne("Events.Domain.Company", "Company")
                        .WithMany("EventCompanies")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Events.Domain.Event", "Event")
                        .WithMany("EventCompanies")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Events.Domain.EventPrivatePerson", b =>
                {
                    b.HasOne("Events.Domain.Event", "Event")
                        .WithMany("EventPrivatePeople")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Events.Domain.PrivatePerson", "PrivatePerson")
                        .WithMany("EventPrivatePeople")
                        .HasForeignKey("PrivatePersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("PrivatePerson");
                });

            modelBuilder.Entity("Events.Domain.Company", b =>
                {
                    b.Navigation("EventCompanies");
                });

            modelBuilder.Entity("Events.Domain.Event", b =>
                {
                    b.Navigation("EventCompanies");

                    b.Navigation("EventPrivatePeople");
                });

            modelBuilder.Entity("Events.Domain.PrivatePerson", b =>
                {
                    b.Navigation("EventPrivatePeople");
                });
#pragma warning restore 612, 618
        }
    }
}
